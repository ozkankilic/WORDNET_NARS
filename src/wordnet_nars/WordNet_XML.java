/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wordnet_nars;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author ozi
 */
public class WordNet_XML extends javax.swing.JFrame {

    /**
     * Creates new form WordNet_XML
     */
    public static NodeList nList; //holding all entries
    ArrayList<Element> nounList = new ArrayList<Element>();
    ArrayList<Element> verbList = new ArrayList<Element>();
    ArrayList<Element> adjectiveList = new ArrayList<Element>();
    ArrayList<Element> adverbList = new ArrayList<Element>();

    public WordNet_XML() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jCheckBox2.setText("Partial");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Complete (partially complete logical forms are ignored)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox1))
                .addContainerGap())
        );

        jLabel1.setText("Word to be searched:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Find");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("WordNet");

        jLabel3.setText("Nars");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton2.setText("Translate All to File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 132, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel3)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        jTextArea2.setText("");
        String txtSrch = jTextField1.getText().toLowerCase();
        String word;
        String status = "";
        String usrStatus = "";
        String gloss;
        String lf;
        //at least one status must be selected.
        if (jCheckBox1.isSelected() && jCheckBox2.isSelected()) {
            usrStatus = "all";
        } else if (jCheckBox1.isSelected()) {
            usrStatus = "complete";
        } else if (jCheckBox2.isSelected()) {
            usrStatus = "partial";
        } else {
            return;
        }

        if (txtSrch != null && !txtSrch.isEmpty()) {
            try {
                for (int temp = 0; temp < nList.getLength(); temp++) {

                    Node nNode = nList.item(temp);

                    if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element eElement = (Element) nNode;
                        word = eElement.getAttribute("word");
                        status = eElement.getAttribute("status");
                        //ADD ALL ELEMENTS REGARDLESS OF STATUS: partial or complete
                        if (usrStatus.startsWith("all") && word.startsWith(txtSrch) && word.substring(txtSrch.length()).startsWith("#")) {
                            switch (word.substring(txtSrch.length() + 1, txtSrch.length() + 2)) {
                                case "n":
                                    nounList.add(eElement);
                                    break;
                                case "v":
                                    verbList.add(eElement);
                                    break;
                                case "a":
                                    adjectiveList.add(eElement);
                                    break;
                                case "r":
                                    adverbList.add(eElement);
                                    break;
                                default:
                                    System.out.println("we do not know this type yet:" + word.substring(txtSrch.length() + 1, txtSrch.length() + 2));

                            }
                        } else if (word.startsWith(txtSrch) && word.substring(txtSrch.length()).startsWith("#") && status.startsWith(usrStatus)) {
                            switch (word.substring(txtSrch.length() + 1, txtSrch.length() + 2)) {
                                case "n":
                                    nounList.add(eElement);
                                    break;
                                case "v":
                                    verbList.add(eElement);
                                    break;
                                case "a":
                                    adjectiveList.add(eElement);
                                    break;
                                case "r":
                                    adverbList.add(eElement);
                                    break;
                                default:
                                    System.out.println("we do not know this type yet:" + word.substring(txtSrch.length() + 1, txtSrch.length() + 2));

                            }
                            //status = eElement.getAttribute("status");
                            //gloss = eElement.getElementsByTagName("gloss").item(0).getTextContent();
                            //lf = eElement.getElementsByTagName("lf").item(0).getTextContent();
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            //n
            if (nounList.size() > 0) {
                jTextArea1.append("NOUN:\n");
                for (int t = 0; t < nounList.size(); t++) {
                    status = nounList.get(t).getAttribute("status");
                    gloss = nounList.get(t).getElementsByTagName("gloss").item(0).getTextContent();
                    lf = nounList.get(t).getElementsByTagName("lf").item(0).getTextContent();
                    jTextArea1.append(t + 1 + ". " + gloss + "\n");
                    jTextArea1.append(lf + "\n\n");
                }

            }
            //v
            if (verbList.size() > 0) {
                jTextArea1.append("VERB:\n");
                for (int t = 0; t < verbList.size(); t++) {
                    status = verbList.get(t).getAttribute("status");
                    gloss = verbList.get(t).getElementsByTagName("gloss").item(0).getTextContent();
                    lf = verbList.get(t).getElementsByTagName("lf").item(0).getTextContent();
                    jTextArea1.append(t + 1 + ". " + gloss + "\n");
                    jTextArea1.append(lf + "\n\n");
                }
            }
            //a
            if (adjectiveList.size() > 0) {
                jTextArea1.append("ADJECTIVE:\n");
                for (int t = 0; t < adjectiveList.size(); t++) {
                    status = adjectiveList.get(t).getAttribute("status");
                    gloss = adjectiveList.get(t).getElementsByTagName("gloss").item(0).getTextContent();
                    lf = adjectiveList.get(t).getElementsByTagName("lf").item(0).getTextContent();
                    jTextArea1.append(t + 1 + ". " + gloss + "\n");
                    jTextArea1.append(lf + "\n\n");
                }
            }
            //r
            if (adverbList.size() > 0) {
                jTextArea1.append("ADVERB:\n");
                for (int t = 0; t < adverbList.size(); t++) {
                    status = adverbList.get(t).getAttribute("status");
                    gloss = adverbList.get(t).getElementsByTagName("gloss").item(0).getTextContent();
                    lf = adverbList.get(t).getElementsByTagName("lf").item(0).getTextContent();
                    jTextArea1.append(t + 1 + ". " + gloss + "\n");
                    jTextArea1.append(lf + "\n\n");
                }
            }
            convertNarsese();
        }

    }//GEN-LAST:event_jButton1ActionPerformed
    public void convertNarsese() { //fills the second text areas with narsese logical forms
        String result = "";
        for (int i = 0; i < nounList.size(); i++) {
            if (i == 0) {
                jTextArea2.append("NOUN:\n");
            }
            String lf = nounList.get(i).getElementsByTagName("lf").item(0).getTextContent();
            String status = nounList.get(i).getAttribute("status");
            String gloss = nounList.get(i).getElementsByTagName("gloss").item(0).getTextContent();
            lf = lf.replace("+e", "");
            String[] concepts = lf.split("\\+|->");
            for (int k = 0; k < concepts.length; k++) {
                concepts[k] = concepts[k].replace("\\'", ""); //eliminate special symbos
                concepts[k] = concepts[k].replace(" ", "");
                
                int loc = concepts[k].indexOf('/'); //eliminate alternating concepts
                if (loc >= 0) {
                    concepts[k] = concepts[k].substring(loc + 1);
                }

            }

            result = narsify(concepts, "n");
            jTextArea2.append(i + 1 + ". " + gloss + "\n");
            jTextArea2.append(result + "\n\n");
            result = "";
        }
        for (int i = 0; i < verbList.size(); i++) {
            if (i == 0) {
                jTextArea2.append("VERB:\n");
            }
            String lf = verbList.get(i).getElementsByTagName("lf").item(0).getTextContent();
            String status = verbList.get(i).getAttribute("status");
            String gloss = verbList.get(i).getElementsByTagName("gloss").item(0).getTextContent();

            lf = lf.replace("+e", "");
            String[] concepts = lf.split("\\+|->");
            for (int k = 0; k < concepts.length; k++) {
                concepts[k] = concepts[k].replace("\\'", ""); //eliminate special symbos
                concepts[k] = concepts[k].replace(" ", "");
                
                int loc = concepts[k].indexOf('/'); //eliminate alternating concepts
                if (loc >= 0) {
                    concepts[k] = concepts[k].substring(loc + 1);
                }

            }

            result = narsify(concepts, "v");
            jTextArea2.append(i + 1 + ". " + gloss + "\n");
            jTextArea2.append(result + "\n\n");
            result = "";
        }
        for (int i = 0; i < adjectiveList.size(); i++) {
            if (i == 0) {
                jTextArea2.append("ADJECTIVE:\n");
            }
            String lf = adjectiveList.get(i).getElementsByTagName("lf").item(0).getTextContent();
            String status = adjectiveList.get(i).getAttribute("status");
            String gloss = adjectiveList.get(i).getElementsByTagName("gloss").item(0).getTextContent();

            lf = lf.replace("+e", "");
            String[] concepts = lf.split("\\+|->");
            for (int k = 0; k < concepts.length; k++) {
                concepts[k] = concepts[k].replace("\\'", ""); //eliminate special symbos
                concepts[k] = concepts[k].replace(" ", "");
                int loc = concepts[k].indexOf('/'); //eliminate alternating concepts
                if (loc >= 0) {
                    concepts[k] = concepts[k].substring(loc + 1);
                }

            }

            result = narsify(concepts, "a");
            jTextArea2.append(i + 1 + ". " + gloss + "\n");
            jTextArea2.append(result + "\n\n");
            result = "";
        }
        for (int i = 0; i < adverbList.size(); i++) {
            if (i == 0) {
                jTextArea2.append("ADVERB:\n");
            }
            String lf = adverbList.get(i).getElementsByTagName("lf").item(0).getTextContent();
            String status = adverbList.get(i).getAttribute("status");
            String gloss = adverbList.get(i).getElementsByTagName("gloss").item(0).getTextContent();

            lf = lf.replace("+e", "");
            String[] concepts = lf.split("\\+|->");
            for (int k = 0; k < concepts.length; k++) {
                concepts[k] = concepts[k].replace("\\'", ""); //eliminate special symbos
                concepts[k] = concepts[k].replace(" ", "");
                int loc = concepts[k].indexOf('/'); //eliminate alternating concepts
                if (loc >= 0) {
                    concepts[k] = concepts[k].substring(loc + 1);
                }

            }

            result = narsify(concepts, "r");
            jTextArea2.append(i + 1 + ". " + gloss + "\n");
            jTextArea2.append(result + "\n\n");
            result = "";
        }
    }

    public String narsify(String[] concepts, String mode) {
        String result = "";
        String extension = "";
        String verbMain = "";
        for (int i = 0; i < concepts.length; i++) {

            String[] vars = concepts[i].split("#|\\'\\(|\\,|\\)");


            int argCounter = 0;
            int firstArgInd = 0;
            String varArguments[] = new String[5];
            vars[0] = vars[0].trim();
            String nn = vars[0].substring(0, 2);
            if (nn.startsWith("nn")&&vars[0].length()==2) {
                continue; //skip nominal marker ing=nn
            }
            if (nn.startsWith("as")&&vars[0].length()==2) {
                continue; //skip nominal marker ing=nn
            }
            if (vars[0].length() > 3) {
                String dset = vars[0].substring(0, 4);
                if (dset.startsWith("dset")) {
                    continue; //skip relativizer that=dset
                }
            }
            for (int t = 1; t < vars.length; t++) //number of X arguments for this concepts
            {
                vars[t] = vars[t].trim();
                if (vars[t].substring(0, 1).startsWith("x") && vars[t].length() >= 2) {
                    varArguments[argCounter] = vars[t];
                    argCounter++;
                    if (firstArgInd == 0) {
                        firstArgInd = t;
                    }

                }
            }
            if (vars[0] == " " || vars[0].isEmpty()) {
                result = result + "INCOMPLETE LOGICAL FORM\n.";
                continue;
            }
            switch (vars[1].substring(0, 1)) //vars[1] is either word type (n,v,a,r) or the first argument of the concept (e, x)
            {
                case "n": //NOUN
                    result = result + "<" + vars[0] + "-->NOUN>.\n";
                    if (argCounter == 1) {
                        if (extension.isEmpty()) {
                            result = result + "<$" + vars[firstArgInd] + "-->" + vars[0] + ">.\n";
                        } else {
                            result = result + "<$" + vars[firstArgInd] + "-->(&,[" + extension + "], " + vars[0] + ")>.\n";
                            extension = "";
                        }

                    }
                    break;
                case "v": //VERB
                    result = result + "<" + vars[0] + "-->VERB>.\n";
                    if (i == 0&&mode.startsWith("v")) {
                        verbMain = vars[0];
                        break;
                    }
                    //define synonym verb
                    if ((i == 1) && mode.startsWith("v")) {
                        result = result + "<" + verbMain + "-->" + vars[0] + ">.\n";
                    }
                    if (argCounter == 1) {
                        if (extension.isEmpty()) {
                            result = result + "<$" + vars[firstArgInd] + "-->" + vars[0] + ">.\n";
                        } else {
                            result = result + "<$" + vars[firstArgInd] + "-->(&,[" + extension + "]," + vars[0] + ")>.\n";
                            extension = "";
                        }

                    } else if (argCounter == 2) {
                        if (extension.isEmpty()) {
                            result = result + "<(*, $" + vars[firstArgInd] + ", $" + vars[firstArgInd + 1] + ")-->" + vars[0] + ">.\n";
                        } else {
                            result = result + "<(*, $" + vars[firstArgInd] + ", $" + vars[firstArgInd + 1] + "-->(&,[" + extension + "]," + vars[0] + ")>.\n";
                            extension = "";
                        }
                    } else if (argCounter == 3 ) {
                        if (extension.isEmpty()) {
                            result = result + "<(*, $" + vars[firstArgInd] + ", $" + vars[firstArgInd + 1] + ", $" + vars[firstArgInd + 2] + ")-->" + vars[0] + ">.\n";
                        } else {
                            result = result + "<(*, $" + vars[firstArgInd] + ", $" + vars[firstArgInd + 1] + ", $" + vars[firstArgInd + 2] + "-->(&,[" + extension + "]," + vars[0] + ")>.\n";

                        }
                    } else if (argCounter > 3) {
                        result = result + "VERB WITH MORE THAN 3 ARGUMENTS." + concepts + "\n";
                        extension = "";
                    }
                    break;
                case "a": //ADJECTIVE
                    result = result + "<" + vars[0] + "-->ADJECTIVE>.\n";
                    if (argCounter == 1) {
                        if (extension.isEmpty()) {
                            result = result + "<$" + vars[firstArgInd] + "-->[" + vars[0] + "]>.\n";
                        } else {
                            result = result + "<$" + vars[firstArgInd] + "-->(&,[" + extension + "]," + vars[0] + ")>.\n";
                            extension = "";
                        }
                    } else if (argCounter == 0) {
                        extension = vars[0];  //attach the adjective to the next noun
                    } else {
                        result = result + "An adjective with two or more arguments? " + concepts + ".\n";
                    }
                    break;
                case "r": //ADVERB. NO ARGUMENT IS POSSIBLE
                    result = result + "<" + vars[0] + "-->ADVERB>.\n";
                    if (argCounter == 1) {
                        if (extension.isEmpty()) {
                            result = result + "<$" + vars[firstArgInd] + "-->[" + vars[0] + "]>.\n";
                        } else {
                            result = result + "<$" + vars[firstArgInd] + "-->(&,[" + extension + "]," + vars[0] + ")>.\n";
                            extension = "";
                        }
                    } else if (argCounter == 0) {
                        extension = vars[0];  //attach the adjective to the next noun
                    } else {
                        result = result + "An adverb with two or more arguments? " + concepts + ".\n";
                    }
                    break;
                case "e":
                case "x"://type is not given. evidentiality. or with argument only.
                    if ((i == 1) && mode.startsWith("v")) {
                        result = result + "<" + verbMain + "-->" + vars[0] + ">.\n";
                    }
                    if (argCounter == 0) {
                        extension = vars[0];
                    } else if (argCounter == 1) {
                        if (extension.isEmpty()) {
                            result = result + "<$" + vars[firstArgInd] + "-->" + vars[0] + ">.\n";
                        } else {
                            result = result + "<$" + vars[firstArgInd] + "-->(&,[" + extension + "]," + vars[0] + ")>.\n";
                            extension = "";
                        }
                    } else if (argCounter == 2) {
                        if (extension.isEmpty()) {
                            result = result + "<(*, $" + vars[firstArgInd] + ", $" + vars[firstArgInd + 1] + ")-->" + vars[0] + ">.\n";
                        } else {
                            result = result + "<(*, $" + vars[firstArgInd] + ", $" + vars[firstArgInd + 1] + "-->(&,[" + extension + "]," + vars[0] + ")>.\n";
                            extension = "";
                        }
                    } else if (argCounter == 3) {
                        if (extension.isEmpty()) {
                            result = result + "<(*, $" + vars[firstArgInd] + ", $" + vars[firstArgInd + 1] + ", $" + vars[firstArgInd + 2] + ")-->" + vars[0] + ">.\n";
                        } else {
                            result = result + "<(*, $" + vars[firstArgInd] + ", $" + vars[firstArgInd + 1] + ", $" + vars[firstArgInd + 2] + "-->(&,[" + extension + "]," + vars[0] + ")>.\n";

                        }
                    } else {
                        result = result + "No idea!!! (WordNet Logical form is incomplete?)" + concepts + "\n";
                    }
                    break;
                default:
                    result = result + "No idea!!! (WordNet Logical form is incomplete?)" + concepts + "\n";
            }
        }

        return result;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WordNet_XML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WordNet_XML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WordNet_XML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WordNet_XML.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WordNet_XML().setVisible(true);
            }
        });
        try {

            File stocks = new File("wne-2006-12-06.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(stocks);
            doc.getDocumentElement().normalize();
            nList = doc.getElementsByTagName("entry");

        } catch (ParserConfigurationException | SAXException | IOException ex) {
            ex.printStackTrace();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
